# Given a string s of '(' , ')' and lowercase English characters.
#
# Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.
#
# Formally, a parentheses string is valid if and only if:
#
# It is the empty string, contains only lowercase characters, or
# It can be written as AB (A concatenated with B), where A and B are valid strings, or
# It can be written as (A), where A is a valid string.

# Method 1: use stack:
# Method 2: remove invalid string back, and force, twice, utilizing balance

# Method 1: using stack:
# step 1: loop from 0 to n-1 in the string,
# step 2: conditions
    # if it is letter, continue
    # if it is '(', put the index in the stack
    # if it is ')',
        # if stack is empty, push the new index to the stack
        # check if the top index in the stack is '('
            # if so, pop the top index from the stack
            # if not, push the new index to the stack
# TC: O(N)
# SC: O(N)


# Method 2:
# step 1: go from left to right, remove invalid ')'
# step 2: go from right to left, remove invalid '('
# condition: define a function to remove invalid using balance, remove when balance = -1
# TC: O(N)
# SC: O(N)

# Method 1:

class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        stack = []
        n = len(s)
        for i in range(n):
            if s[i] == '(':
                stack.append(i)
            elif s[i] == ')':
                if len(stack) == 0:
                    stack.append(i)
                elif s[stack[-1]] == '(':
                    stack.pop()
                else:
                    stack.append(i)
        new_s = ''
        for i in range(n):
            if i not in stack:
                new_s = new_s + s[i]
        return new_s



# Method 2:
# step 1: go from left to right, remove invalid ')'
# step 2: go from right to left, remove invalid '('
# condition: define a function to remove invalid using balance, remove when balance = -1
# TC: O(N)
# SC: O(N)

class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        def remove_invalid(s, s_kept, invalid_s):
            balance = 0
            n = len(s)
            del_index = []
            for i in range(n):
                if s[i] == s_kept:
                    balance += 1
                if s[i] == invalid_s:
                    if balance == 0:
                        del_index.append(i)
                    elif balance >= 0:
                        balance -= 1

            return "".join([s[i] for i in range(n) if i not in del_index])


        s = remove_invalid(s, '(', ')')
        s = s[::-1]
        s = remove_invalid(s, ')', '(')

        return s[::-1]

s = Solution()
s = "))))(())))())))())()()()(db)))()(i))(())(((((()(()))(((()((((()))(m(())()((x)))((y())(()())(())))()()()))((())f(()m()((((()))(t()(nn)())(f)))(h)()()))n(()))(())(())(m)()))((()))())))())(()(()(())((()p((()(()((()(())))r)(m()))()(jo())(()()()())))()r)(())(j()(()g)()))(()()((())((())))(((())((((y)(kq))a)(u))()d(()))i()(())()())())()()m())(()))()(h))())()((j)))a(p(((()()p)()(()((()p))))))))))((()))((()(())()()()()))(()k))))(u))((())(()(()((()))(x((()(()(()()(()(((s)()()())()(g())))h)(((dc)(()(())()))c)(((()d)((((())))()()(()(())(((())v)(()(())z())(z()())(())s((()()((z)())((()l))()()a)()()(w)(((()(((((()(p()h)f((()(((())))()))()))r)()))((o))(()())()()y((())()((((()))))))((()(q)))(dz((((((s))))()()(l())vg(())())((())))k((()(a)(()(())(u()))())(())))())))b)(p((()()(()()((()()))(()(())()))(()))((k()))()))()(j((())))(()a))))f))()()(()(())(()()))())(()((()()())((((()()l)()a)(((usg)(((()(()))))())(((i))))((()))))))()(())))(()))z)a)))())())(((())((()()(d)()(((())l()()y)()))l))))(())v(()()()(l((()(())x)))))())(())((()()))))))())()d())()(f(((()((u(()))())()(a)e(()(())(())()()()()()))t(()())()((((o())(r(())())n()()))(((((())())))))))(v((((((()e)m)(()))((()))b)((()()(()(u()()((()(()()(k(i()())(()))())()()(()(o()(())(((v)))(s))((()ow(()((()()()))(((k()((((()())()((((())j()))(())((())(((()))))))(((()(c(bog(b)e(((((()()(())()x(())))s)(((()l()()))))))()()((())))())((b(())()((()())(((ls(((((c)w((()))(()))))()()((k()())n(()((((((())))(g)(((p))(m(((()))(())v()((())))()((()m)((()()()())()()()q)(()()t)((ht((((())(()((()))(()(c()h(()((()()v)()(()((()(((()(()((()(()))()()(((y(())(in())((()c))()()(yc())))())(())))()(((())()(w)p((()(((()f(((())))(()))((()()()()()(())()()((()(())(()))(g()))()))()o))(b(()())(()r(()(((u))()))(z))(((((()()(())l((d())(())((())()((r(()(()()(rg()(j()))))(n))())))(z)()(i())(p(()()())))a((()(()()(())()())(()()()))((()))h))h((()(z)(())((g()x)))))())()()v)())s)()()ct)(p))))((((())()(())(())))))((()((im)k))()()k)((((()))())(((()())l)))((l()(())())()()(((()()n()(())((()))()()()))w(((())))()())))(((()))))))())))(gz))(((o(f))()((y)aa()((()()j))(()))))())(()((q((())())()))())((())()b)())()))(((()((()())g)()))()()))((e))(()((())(((()s)a()))j())()))((())(()(((())))((())))er()(())a))()())(()sz))((()(()()))t)()(mu)((((v)m)))((q((y))))g(((r(a(()()v()()))()))j)()()ac))())()(o(()(()x))rh()))()()(()((())((()(((y)(((y)((o((((((())(()()))a((())()()()(()beg()))fh(((w()())()))(()((())()))()((()m)(((((()(()()z)i()()(()()f))((()(k(((x))(()))())()()(i)))))()((s)))()))())))n)())()()c))s())m)zbf)((j(((())(()(())))()o()()))())((s()())((((((c(a)))t(s())()((()(((b))(((r)h)))()()))))())())((()))()))())))())((n())(((((()))))(w()((()((((((()(())()())(((())(g))))()((((((()(()g((()(((()y))))()(f()())(()(())(f()yu))))))()())((())g))()(()o))))bz))()())g))()())(t(()()))))(()ce(g((()((()()))()())())(()))((()(()m))e(z)p(())(c))(((ye)x)o))((g))())w(()(()y)()))(()()()())nd(()())er())m)(w)w()l))())h)(s()(()))u)))(((()(()()))(()()()((s(()))))((()))()s))()()(()))(((())(l))()x())((f(())((()((w)()(i()()y(()())()(()))))))))b)(()((())()))(()(c((h((((((()(()s)(((t(()())))()())w()))(()(()hh(((()((((o(g))((()(()(((()))))))()())((()))u((()()e))))(()()(()a))r(q((()())(()(t())q)(()()()))))))))())((()()))(j(iw()())()()(c(c((((())()(dr(()()()(()((((())i((())(()))()(()(m)i()s)()))c)j)((()p())((((m((())(((()()(((p(((((()((()))((())()(((()(()()(((()))((((ij())))()(()())()h)()(o())w()())))())())(e()(())p))z)ox)(q(q)((())()(())())e))((e)x)(()(x)((()(()()))(((())()))n))n))k))))())((()()(kq))d(())((b()))((())()(((()()(((i()((((()()))(n((())(r()(((((l())))(i()(())(()))))))()((()(()(())nk)()))r))()()(n))((()))))))))(()((())(()))()(())((n)g())(()((((hck()(p))(((()())y()()))()()(())((()((((((t))()((((()(()((((()((s)f(()m()))v()()()))()()()((())((((((((((()(((((((()()())()()(())()qi((((()t())())())))((()()(n(((())()()(d)q(((((r())cx()((()))(g(rm(n()((()()(()))()))(k(((())((()(g)bz())(((((()((ri(((()(())))((u((())a)d()()m((()((()((()))(t()(())((()))f(())))e(())(()(u(()()y(((()((()(()o))(k(()k((r()r))b()())())()(())h))r)(()(((()))u()))(()w())())))()(((((((((()))(g((()(((()(()))())((((()())())()h)))((()l())))(f)))(()((()l()()(())))j))())(()i)n((()))())((w()))()c)(())fq())())(((x((k)))()((()(()()))((()()((e))(((()e((t))()(()((y()((())()))(((()))(((())((())n())(u)(((((()(()(((((((o))()()))(()(()(()(()))())()(())))((()()()()kc)e))()()))nl)())(()()(()((m(())())()())))))(n(()(((((()b))(()))(x(((()()))()g(e((c())w(c((o()()(()()(e(())())iy)))(())()((((q)))))))k()(n(r)(())((h)))j)())y))((i)h)))((g()())()))r)(b(()((()())))(b))))()(((())()(((d))))((()(((v()))((w(c))()()y)())s)())((t(()()(()w)()))()()))))))()(((vp)((()d())))(r)((()))(()()))((((m(()d)(())(()))((((((()))(()d)(())))))()))(((()))()))))(())())(()()((((()((((p))()))()))((y()()((())(c))(())))())(())u((()))()q)(()()()(b((((())()())())tk)))((((()(x((()(()()()))f))(()())()()(()()(()((((()))(((()(g))(()()()nr()(()(vt))(p(()h(((d))(y(()(())()((()(())())))s)aj()()))((()())((()((()(n)())(()())(()(()((())))()((d()(()))(fm((x)(((m))))())(("
